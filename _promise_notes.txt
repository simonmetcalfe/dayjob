MAIN.JS PROMISES AND WORKFLOW

connectApi called in background
|
checkApiConnection DONE
|
refreshAccessToken DONE 
|
spotifyApi.getMe DONE
|
RESOLVE 'ready' (users name displayed from Preferences)
ERR 'no_client_id'
ERR 'no_authorisation_code'
DONE * ERR 'cannot_refresh_access_token' - refreshAccessToken should return this if spotifyApi.refreshAccessToken returns an error
DONE * ERR 'cannot_get_users_details' - checkApiConnection should return this if spotifyApi.getMe fails
|
getAuthUrl (if error 'no_authorisation_code')
|
RESOLVE createAuthorizeURL
* ERR 'cannot_get_auth_url' - getAuthUrl should be returned this if 


ctrl+alt+plus pressed
|
movePlayingTrackToPlaylist
|
getPlayingTrackInfo
|
checkApiConnection DONE
|
spotifyApi.getMyCurrentPlayingTrack
|
getTrackContext
|
getPlaylistName
|
spotufyApi.getPlaylist
|
addTrackToPlaylist
|
spotifyApi.addTracksToPlaylist
|
removeTracksFromPlaylist
|
spotifyApi.removeTracksFromPlaylist
|

|
RESOLVE result
DONE * ERR 'cannot_get_playing_track_info' - getPlayingTrackInfo could return this if an error is received from the API
DONE * ERR 'track_not_playing' - getPlayingTrackInfo could return this if it's determined a track is not playing 
DONE * ERR 'track_is_podcast' - already returned from getPlayingTrackInfo, should be handled becuase NOTHING can be done with a podcast
DONE * ERR 'error_parsing_playing_track_json'
DONE * ERR 'cannot_get_source_playlist_name'
DONE * ERR 'cannot_get_playlist_info' - getPlaylistName COULD be updated return this alongside the error from the API
DONE * ERR 'cannot_add_track_to_playlist' - addTrackToPlaylist could return if API fails
DONE * ERR 'cannot_remove_track_from_playlist' - removeTraksFromPlaylist could return if API fails
DONE * ERR 'playlist_is_read_only' - removePlaylingTracksFromPlaylist could throw this error because nothing can be removed if playlist is read only
N/A ALSO CONSIDER ANY OF THE API ERRORS

SPOTIFY-SERVER.JS PROMISES
--------------------------

checkApiConnection - returns its own Promise
    Calls Promises
        refreshAccessToken
        spotifyApi.getMe
    Error responses
        'no_client_id'
        'no_authorisation_code'
        err from refreshAccessToken
        err from spotifyApi.getMe
    Resolution
        'ready'
        'ready' if refreshAccessToken resolved
        'ready' if spotifyApi.getMe resolved


getAuthUrl - returns its own Promise
    Errors 
        (none, it always resolves)
    Resolution
        authoriseUrl

authCodeGrant - does not return anything
    Calls Promises 
        spotifyApi.authorizationCodeGrant
        spotifyApi.getMe
    Error responses
        None
    Resolution 
        None

refreshAccessToken - returns its own Promise
    Calls Promises
        spotifyApi.refreshAccessToken
    Errors
        err from spotifyApi.refreshAccessToken
    Resolution
        'access_token_refreshed'


skipToNext - returns its own Promise
    Calls Promises 
        spotifyApi.skipToNext
    Errors
        None
    Resolution
        null

getPlaylistName - returns its own Promise
    Calls Promises 
        spotifyApi.getPlaylist 
    Errors
        result.body.name from spotifyApi.getPlaylist
    Resolution
        err from spotifyApi.getPlaylist


getPlayingTrackInfo
    Calls Promises 
        checkApiConnection
        spotifyApi.getMyCurrentPlayingTrack
    Errors 
        'podcast'
    Resolution 
        trackInfo

getTrackContext - returns its own Promise
    Calls Promises
        getPlaylistName
    Errors
        err from getPlaylistName
    Resolution
        context

remove/move/copyPlayingTrackFromPlaylist()
    Calls Promises 
        getPlayingTrackInfo
        getTrackContext
        addTrackToPlaylist
        removeTracksFromPlaylist
    Errors
        None
    Resolution
        result from getPlayingTrackInfo


    






TODO:
* Add handling for port 8080 already in use when webserver is initialised
* Check if spotifyApi.resetAccessToken() or spotifyApi.resetRefreshToken() or spotifyApi.createAuthorizeURL() can return a Promise, and updatee getAuthUrl if they do
* log.warn usage is incorrect
* Clear the users name at startup to force checkApiConnection to actually try a connection once (otherwise it will say 'connected' if the token is valid without even trying)